package org.milaifontanals.clubEsportiu.vista;

import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import org.milaifontanals.clubEsportiu.model.Categoria;
import org.milaifontanals.clubEsportiu.model.Jugador;
import org.milaifontanals.clubEsportiu.model.Temporada;
import org.milaifontanals.clubEsportiu.persistencia.GestorBDClubEsportiuException;
import org.milaifontanals.clubEsportiu.persistencia.IGestorBDClubEsportiu;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author isard
 */
public class GestioJugadors extends javax.swing.JFrame {

    private IGestorBDClubEsportiu capaOracleJDBC = null;
//    private GestorBDClubEsportiuJdbc capaOracleJDBC = null;
    private List<Categoria> llCategories;
    private Jugador jugador;
    private List<Jugador> jugadors;
    private static final int ID_JUGADOR_INDEX = 5;
    private Temporada temp;
    private FinestraLogin flogin;

    /**
     * Creates new form GestioJugadors
     */
    public GestioJugadors(IGestorBDClubEsportiu capa, Temporada temporada, FinestraLogin f) {
        try {
            initComponents();

            this.capaOracleJDBC = capa;
            this.temp = temporada;
            this.flogin = f;
            lblFormat.setVisible(false);
            lblFormatNif.setVisible(false);
            lblInserir.setVisible(false);
            lblesborrar.setVisible(false);

            llCategories = capaOracleJDBC.obtenirCategories("");
            comboCategoria.addItem(new Categoria());
            for (Iterator<Categoria> iterator = llCategories.iterator(); iterator.hasNext();) {
                Categoria next = iterator.next();
                comboCategoria.addItem(next);

            }
            TableColumn idColumn = tableJugador.getColumnModel().getColumn(5);
            tableJugador.removeColumn(idColumn);
            tableJugador.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        } catch (GestorBDClubEsportiuException ex) {
            Logger.getLogger(GestioJugadors.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rbCognom = new javax.swing.JRadioButton();
        rbNaixement = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboCategoria = new javax.swing.JComboBox<>();
        txtNif = new javax.swing.JTextField();
        txtNom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblFormatNif = new javax.swing.JLabel();
        txtNaixement = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnCercar = new javax.swing.JButton();
        lblFormat = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        btnInserir = new javax.swing.JButton();
        btnEsborrar = new javax.swing.JButton();
        lblesborrar = new javax.swing.JLabel();
        lblInserir = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableJugador = new javax.swing.JTable();
        tornarEnrere = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnExportar = new javax.swing.JButton();
        btnExportar1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblInserir1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestió Jugador");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Gestió dels Jugadors");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 350, 40));

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("Ordenar per:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 90, 162, -1));

        buttonGroup1.add(rbCognom);
        rbCognom.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        rbCognom.setForeground(new java.awt.Color(0, 102, 102));
        rbCognom.setSelected(true);
        rbCognom.setText("cognom");
        rbCognom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCognomActionPerformed(evt);
            }
        });
        jPanel1.add(rbCognom, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 120, -1, -1));

        buttonGroup1.add(rbNaixement);
        rbNaixement.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        rbNaixement.setForeground(new java.awt.Color(0, 102, 102));
        rbNaixement.setText("data de naixement");
        rbNaixement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNaixementActionPerformed(evt);
            }
        });
        jPanel1.add(rbNaixement, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 150, -1, -1));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Nom:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 40, -1));

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("NIF:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 44, -1));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("Categoria:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 61, -1));

        comboCategoria.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        comboCategoria.setForeground(new java.awt.Color(0, 102, 102));
        comboCategoria.setMaximumRowCount(6);
        comboCategoria.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        comboCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoriaActionPerformed(evt);
            }
        });
        jPanel1.add(comboCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 280, 129, -1));

        txtNif.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        txtNif.setForeground(new java.awt.Color(0, 102, 102));
        jPanel1.add(txtNif, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 129, -1));

        txtNom.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        txtNom.setForeground(new java.awt.Color(0, 102, 102));
        txtNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomActionPerformed(evt);
            }
        });
        jPanel1.add(txtNom, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 129, -1));

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Data Naixement: ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, -1, 20));

        lblFormatNif.setFont(new java.awt.Font("Roboto", 1, 10)); // NOI18N
        lblFormatNif.setForeground(new java.awt.Color(255, 0, 51));
        lblFormatNif.setText("NIF Incorrecte");
        jPanel1.add(lblFormatNif, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 240, 90, 20));

        txtNaixement.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        txtNaixement.setForeground(new java.awt.Color(0, 102, 102));
        txtNaixement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNaixementActionPerformed(evt);
            }
        });
        jPanel1.add(txtNaixement, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 200, 103, -1));

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("dd/mm/yyyy");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 170, 78, -1));

        btnCercar.setBackground(new java.awt.Color(0, 102, 102));
        btnCercar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnCercar.setForeground(new java.awt.Color(255, 255, 255));
        btnCercar.setText("Cercar");
        btnCercar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCercarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCercar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, 103, -1));

        lblFormat.setFont(new java.awt.Font("Roboto", 1, 10)); // NOI18N
        lblFormat.setForeground(new java.awt.Color(255, 0, 51));
        lblFormat.setText("Format Incorrecte");
        jPanel1.add(lblFormat, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, -1, 20));

        btnModificar.setBackground(new java.awt.Color(0, 102, 102));
        btnModificar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 200, -1, -1));

        btnInserir.setBackground(new java.awt.Color(0, 102, 102));
        btnInserir.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnInserir.setForeground(new java.awt.Color(255, 255, 255));
        btnInserir.setText("Crear");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });
        jPanel1.add(btnInserir, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 240, 80, -1));

        btnEsborrar.setBackground(new java.awt.Color(0, 102, 102));
        btnEsborrar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnEsborrar.setForeground(new java.awt.Color(255, 255, 255));
        btnEsborrar.setText("Esborrar");
        btnEsborrar.setEnabled(false);
        btnEsborrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEsborrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEsborrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 80, -1));

        lblesborrar.setFont(new java.awt.Font("Roboto", 1, 10)); // NOI18N
        lblesborrar.setForeground(new java.awt.Color(255, 0, 51));
        lblesborrar.setText("Escull Un Jugador");
        jPanel1.add(lblesborrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 290, -1, -1));

        lblInserir.setFont(new java.awt.Font("Roboto", 1, 10)); // NOI18N
        lblInserir.setForeground(new java.awt.Color(255, 0, 51));
        lblInserir.setText("Escull Un Jugador");
        jPanel1.add(lblInserir, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 200, -1, 20));

        tableJugador.setAutoCreateRowSorter(true);
        tableJugador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tableJugador.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        tableJugador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nom", "Sexe", "Data Naixement", "NIF", "Categoria", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableJugador);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 733, 198));

        tornarEnrere.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        tornarEnrere.setForeground(new java.awt.Color(0, 102, 102));
        tornarEnrere.setText("Tornar Enrere");
        tornarEnrere.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 102), new java.awt.Color(0, 102, 102), null, new java.awt.Color(0, 102, 102)));
        tornarEnrere.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Font font = tornarEnrere.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        tornarEnrere.setFont(font.deriveFont(attributes));
        tornarEnrere.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tornarEnrereMouseClicked(evt);
            }
        });
        jPanel1.add(tornarEnrere, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 80, -1));

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 102));
        jLabel8.setText("Exportar:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 540, 61, 20));

        btnExportar.setBackground(new java.awt.Color(0, 102, 102));
        btnExportar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnExportar.setForeground(new java.awt.Color(255, 255, 255));
        btnExportar.setText("CSV");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });
        jPanel1.add(btnExportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 540, -1, -1));

        btnExportar1.setBackground(new java.awt.Color(0, 102, 102));
        btnExportar1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnExportar1.setForeground(new java.awt.Color(255, 255, 255));
        btnExportar1.setText("XML");
        btnExportar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnExportar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 540, -1, -1));

        jLabel9.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 102));
        jLabel9.setText("Filtrar Per:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 120, -1));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 3, true));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 824, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 110, 830, 420));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 783, 570));

        lblInserir1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblInserir1.setForeground(new java.awt.Color(255, 0, 51));
        getContentPane().add(lblInserir1, new org.netbeans.lib.awtextra.AbsoluteConstraints(753, 582, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tornarEnrereMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tornarEnrereMouseClicked
        this.flogin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_tornarEnrereMouseClicked

    private void txtNaixementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNaixementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNaixementActionPerformed

    private void txtNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomActionPerformed

    private void rbCognomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCognomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbCognomActionPerformed

    private void rbNaixementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNaixementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbNaixementActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed


        try {
            // Recuperar el ID desde el modelo (columna 5 en este caso)
            int id = obtenirIDJugador();
            if (id != -1) {
                InserirModificarJugador log = new InserirModificarJugador(id, capaOracleJDBC, temp, this);
                log.setVisible(true);
                this.setVisible(false);

            } else {
                lblInserir.setVisible(true);
                System.out.println("No se ha seleccionado ninguna fila.");

            }
        } catch (ClassCastException | ArrayIndexOutOfBoundsException e) {

            System.out.println("Error al recuperar el ID: " + e.getMessage());
        }


    }//GEN-LAST:event_btnModificarActionPerformed
    private int obtenirIDJugador() {
        int selectedRow = tableJugador.getSelectedRow();
        if (selectedRow == -1) {
            return -1; 
        }

        int modelRow = tableJugador.convertRowIndexToModel(selectedRow);
        TableModel model = tableJugador.getModel();

        try {
            return (int) model.getValueAt(modelRow, ID_JUGADOR_INDEX); 
        } catch (ClassCastException | ArrayIndexOutOfBoundsException e) {
            System.out.println("Error al recuperar el ID del jugador: " + e.getMessage());
            return -1; // Devuelve un valor inválido en caso de error
        }
    }
    private void comboCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoriaActionPerformed

    }//GEN-LAST:event_comboCategoriaActionPerformed

    private void btnCercarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCercarActionPerformed

        Categoria categoriaSeleccionada = (Categoria) comboCategoria.getSelectedItem();
        String nomCategoria = categoriaSeleccionada.getNom();
        int idCategoria = 0;
        LocalDate data = null;
        String nomEquip = null;
        String nif = null;
        int ordreJugadors;

        lblFormat.setVisible(false);
        lblFormatNif.setVisible(false);
        if (categoriaSeleccionada != null) {
            idCategoria = categoriaSeleccionada.getId();

        }
        if (!txtNaixement.getText().isEmpty()) {
            LocalDate validaData = null;
            try {
                validaData = capaOracleJDBC.validarData(txtNaixement.getText().trim());
            } catch (GestorBDClubEsportiuException ex) {
                Logger.getLogger(GestioJugadors.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (validaData == null) {
                JOptionPane.showMessageDialog(this, "La data introduïda no és vàlida. Format esperat: dd/MM/yyyy",
                        "Error de data", JOptionPane.ERROR_MESSAGE);
                lblFormat.setVisible(true);
                return;
            }
            data = validaData;

        }
        if (!txtNom.getText().isEmpty()) {
            nomEquip = txtNom.getText().trim();
        }
        if (!txtNif.getText().isEmpty()) {
            if (txtNif.getText().trim().matches("^\\d{8}[A-Za-z]$")) {
                nif = txtNif.getText().trim();
            } else {
                lblFormatNif.setVisible(true);
                return;
            }
        }
        ordreJugadors = rbCognom.isSelected() ? 1 : 0;

        try {
            jugadors = capaOracleJDBC.filtreJugadorCatDataNomNif(idCategoria, data != null ? java.sql.Date.valueOf(data) : null,
                    nomEquip != null ? nomEquip : null, nif, temp, ordreJugadors);

            omplirTaula(jugadors);

            btnModificar.setEnabled(true);
            btnEsborrar.setEnabled(true);
        } catch (GestorBDClubEsportiuException ex) {
            Logger.getLogger(GestioJugadors.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnCercarActionPerformed

    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        int jugador = 0;
        InserirModificarJugador log = new InserirModificarJugador(jugador, capaOracleJDBC, temp, this);
        log.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnInserirActionPerformed

    private void btnEsborrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEsborrarActionPerformed
        try {
            Jugador jugadorDel = new Jugador();
            int id = obtenirIDJugador();
            if (id != -1) {
                jugadorDel.setId(id);
                try {
                    if (capaOracleJDBC.jugadorSenseEquip(jugadorDel)) {
                        capaOracleJDBC.eliminarJugador(jugadorDel);
                        JOptionPane.showMessageDialog(null, "Jugador eliminat correctament");
                        capaOracleJDBC.confirmarCanvis();
                        omplirTaula(jugadors);
                    } else {
                        JOptionPane.showMessageDialog(null, "Aquest jugador pertany a un equip, no és pot esborrar: ", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                } catch (GestorBDClubEsportiuException ex) {
                    Logger.getLogger(GestioJugadors.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                lblesborrar.setVisible(true);
                System.out.println("No has seleccionado ninguna fila.");

            }
        } catch (ClassCastException | ArrayIndexOutOfBoundsException e) {

            System.out.println("Error al recuperar l'ID: " + e.getMessage());
        }
    }//GEN-LAST:event_btnEsborrarActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        Map<Jugador, String> llJugadors = null;

        try {
            llJugadors = capaOracleJDBC.obtenirJugadorsAmbEquips();
            exportarACSV(llJugadors, "jugadors.csv");
            JOptionPane.showMessageDialog(null, "Jugadors exportats amb format CSV");          
        } catch (GestorBDClubEsportiuException ex) {
            Logger.getLogger(GestioJugadors.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error exportant jugadors: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnExportar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportar1ActionPerformed
        Map<Jugador, String> llJugadors = null;

        try {
            llJugadors = capaOracleJDBC.obtenirJugadorsAmbEquips();
             exportarAXML(llJugadors, "jugadors.xml");
             JOptionPane.showMessageDialog(null, "Jugadors exportats amb format XML");
        } catch (GestorBDClubEsportiuException ex) {
            Logger.getLogger(GestioJugadors.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error exportant jugadors: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnExportar1ActionPerformed
    private void exportarACSV(Map<Jugador, String> llJugadors, String archivoCSV) {
        try (FileWriter writer = new FileWriter(archivoCSV)) {
            writer.append("ID,Nom,Cognom,Sexe,Data Naixement,NIF,IBAN,Adreça,Codi Postal,Població,Foto,Equips\n");

            for (Map.Entry<Jugador, String> entry : llJugadors.entrySet()) {
                Jugador jugador = entry.getKey();
                String equips = entry.getValue();

                writer.append(jugador.getId() + ",")
                        .append(jugador.getNom() + ",")
                        .append(jugador.getCognoms() + ",")
                        .append(jugador.getSexe() + ",")
                        .append(jugador.getDataNaixement() + ",")
                        .append(jugador.getIdLegal() + ",")
                        .append(jugador.getIBAN() + ",")
                        .append(jugador.getAdreca() + ",")
                        .append(jugador.getCodiPostal() + ",")
                        .append(jugador.getPoblacio() + ",")
                        .append(jugador.getFoto() + ",")
                        .append(equips + "\n");
            }

            System.out.println("Jugadors exportats correctament a " + archivoCSV);
        } catch (IOException e) {
            System.err.println("Error al exportar a CSV: " + e.getMessage());
        }
    }

    private void exportarAXML(Map<Jugador, String> llJugadors, String archivoXML) {
        try {

            XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();
            try (FileWriter fileWriter = new FileWriter(archivoXML)) {
                XMLStreamWriter xmlWriter = xmlOutputFactory.createXMLStreamWriter(fileWriter);

                xmlWriter.writeStartDocument("UTF-8", "1.0");
                xmlWriter.writeStartElement("Jugadors");

                for (Map.Entry<Jugador, String> entry : llJugadors.entrySet()) {
                    Jugador jugador = entry.getKey();
                    String equips = entry.getValue();

                    xmlWriter.writeStartElement("Jugador");

                    xmlWriter.writeStartElement("ID");
                    xmlWriter.writeCharacters(String.valueOf(jugador.getId()));
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("Nom");
                    xmlWriter.writeCharacters(jugador.getNom());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("Cognom");
                    xmlWriter.writeCharacters(jugador.getCognoms());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("Sexe");
                    xmlWriter.writeCharacters(String.valueOf(jugador.getSexe()));
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("DataNaixement");
                    xmlWriter.writeCharacters(String.valueOf(jugador.getDataNaixement()));
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("NIF");
                    xmlWriter.writeCharacters(jugador.getIdLegal());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("IBAN");
                    xmlWriter.writeCharacters(jugador.getIBAN());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("Adreça");
                    xmlWriter.writeCharacters(jugador.getAdreca());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("CodiPostal");
                    xmlWriter.writeCharacters(jugador.getCodiPostal());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("Poblacio");
                    xmlWriter.writeCharacters(jugador.getPoblacio());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("Foto");
                    xmlWriter.writeCharacters(jugador.getFoto());
                    xmlWriter.writeEndElement();

                    xmlWriter.writeStartElement("Equips");
                    xmlWriter.writeCharacters(equips);
                    xmlWriter.writeEndElement();

                    xmlWriter.writeEndElement();
                }

                xmlWriter.writeEndElement();
                xmlWriter.writeEndDocument();

            }
        } catch (Exception e) {
            System.err.println("Error al exportar a XML: " + e.getMessage());
        }
    }

    public void omplirTaula(List<Jugador> jugadors) {
        DefaultTableModel model = (DefaultTableModel) tableJugador.getModel();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

// Formatea la fecha
        model.setRowCount(0);
        for (Jugador jugador : jugadors) {
            model.addRow(new Object[]{jugador.getNom(), jugador.getSexe(), jugador.getDataNaixement().format(formatter), jugador.getIdLegal(), jugador.getNomCategoria(), jugador.getId()});
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCercar;
    private javax.swing.JButton btnEsborrar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnExportar1;
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnModificar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<Categoria > comboCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblFormatNif;
    private javax.swing.JLabel lblInserir;
    private javax.swing.JLabel lblInserir1;
    private javax.swing.JLabel lblesborrar;
    private javax.swing.JRadioButton rbCognom;
    private javax.swing.JRadioButton rbNaixement;
    private javax.swing.JTable tableJugador;
    private javax.swing.JLabel tornarEnrere;
    private javax.swing.JTextField txtNaixement;
    private javax.swing.JTextField txtNif;
    private javax.swing.JTextField txtNom;
    // End of variables declaration//GEN-END:variables
}
